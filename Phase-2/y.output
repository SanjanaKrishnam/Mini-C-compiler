Terminals which are not used

   MAIN
   VOID
   SHORT
   SIGNED
   UNSIGNED
   STRING


State 53 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declarationList

    2 declarationList: declarationList declaration
    3                | declaration

    4 declaration: varDeclaration
    5            | funDeclaration

    6 varDeclaration: typeSpecifier varDeclList ';'

    7 varDeclList: varDeclList ',' varDeclInitialize
    8            | varDeclInitialize

    9 varDeclInitialize: varDecId
   10                  | varDecId ASSIGN simpleExpression

   11 varDecId: IDENTIFIER
   12         | IDENTIFIER '[' INT_CONSTANT ']'

   13 const_type: DEC_CONSTANT
   14           | INT_CONSTANT
   15           | HEX_CONSTANT

   16 typeSpecifier: typeSpecifier pointer
   17              | INT
   18              | LONG INT
   19              | CHAR

   20 pointer: MULTIPLY pointer
   21        | MULTIPLY

   22 funDeclaration: typeSpecifier IDENTIFIER '(' params ')' compoundStmt

   23 funCall: IDENTIFIER '(' params ')' statement

   24 params: paramList
   25       | /* empty */

   26 paramList: paramList ',' paramTypeList
   27          | paramTypeList

   28 paramTypeList: typeSpecifier paramIdList

   29 paramIdList: paramIdList ',' paramId
   30            | paramId

   31 paramId: IDENTIFIER
   32        | IDENTIFIER '[' ']'

   33 statement: expressionStmt
   34          | compoundStmt
   35          | selectionStmt
   36          | iterationStmt
   37          | jumpStmt
   38          | returnStmt
   39          | breakStmt
   40          | funCall

   41 compoundStmt: '{' localDeclarations statementList '}'

   42 localDeclarations: localDeclarations varDeclaration
   43                  | /* empty */

   44 statementList: statementList statement
   45              | /* empty */

   46 expressionStmt: expression ';'
   47               | ';'

   48 selectionStmt: IF '(' simpleExpression ')' statement
   49              | IF '(' simpleExpression ')' statement ELSE statement

   50 iterationStmt: WHILE '(' simpleExpression ')' statement
   51              | DO statement WHILE '(' expression ')'
   52              | FOR '(' expression ';' expression ';' expression ')' statement

   53 jumpStmt: GOTO IDENTIFIER ';'
   54         | CONTINUE ';'

   55 returnStmt: RETURN ';'
   56           | RETURN expression

   57 breakStmt: BREAK ';'

   58 expression: IDENTIFIER ASSIGN expression
   59           | IDENTIFIER ADD_ASSIGN expression
   60           | IDENTIFIER SUB_ASSIGN expression
   61           | IDENTIFIER MUL_ASSIGN expression
   62           | IDENTIFIER DIV_ASSIGN expression
   63           | IDENTIFIER MOD_ASSIGN expression
   64           | INCREMENT IDENTIFIER
   65           | DECREMENT IDENTIFIER
   66           | simpleExpression

   67 simpleExpression: simpleExpression LG_OR andExpression
   68                 | andExpression

   69 andExpression: andExpression LG_AND unaryRelExpression
   70              | unaryRelExpression

   71 unaryRelExpression: NOT unaryRelExpression
   72                   | relExpression

   73 relExpression: sumExpression GREATER_THAN sumExpression
   74              | sumExpression LESSER_THAN sumExpression
   75              | sumExpression LESS_EQ sumExpression
   76              | sumExpression GREATER_EQ sumExpression
   77              | sumExpression NOT_EQ sumExpression
   78              | sumExpression EQUAL sumExpression
   79              | sumExpression

   80 sumExpression: sumExpression ADD term
   81              | sumExpression SUBTRACT term
   82              | term

   83 term: term MULTIPLY unaryExpression
   84     | term DIVIDE unaryExpression
   85     | term MOD unaryExpression
   86     | unaryExpression

   87 unaryExpression: unaryOp unaryExpression
   88                | factor

   89 unaryOp: '-'
   90        | '*'
   91        | '?'

   92 factor: IDENTIFIER
   93       | '(' expression ')'
   94       | const_type


Terminals, with rules where they appear

$end (0) 0
'(' (40) 22 23 48 49 50 51 52 93
')' (41) 22 23 48 49 50 51 52 93
'*' (42) 90
',' (44) 7 26 29
'-' (45) 89
';' (59) 6 46 47 52 53 54 55 57
'?' (63) 91
'[' (91) 12 32
']' (93) 12 32
'{' (123) 41
'}' (125) 41
error (256)
MAIN (258)
ADD (259) 80
SUBTRACT (260) 81
MULTIPLY (261) 20 21 83
DIVIDE (262) 84
ASSIGN (263) 10 58
GREATER_THAN (264) 73
LESSER_THAN (265) 74
MOD (266) 85
ADD_ASSIGN (267) 59
SUB_ASSIGN (268) 60
MUL_ASSIGN (269) 61
DIV_ASSIGN (270) 62
MOD_ASSIGN (271) 63
VOID (272)
IF (273) 48 49
ELSE (274) 49
FOR (275) 52
DO (276) 51
WHILE (277) 50 51
GOTO (278) 53
BREAK (279) 57
CONTINUE (280) 54
RETURN (281) 55 56
INT (282) 17 18
SHORT (283)
LONG (284) 18
CHAR (285) 19
SIGNED (286)
UNSIGNED (287)
LG_OR (288) 67
LG_AND (289) 69
NOT (290) 71
LESS_EQ (291) 75
GREATER_EQ (292) 76
EQUAL (293) 78
DECREMENT (294) 65
INCREMENT (295) 64
NOT_EQ (296) 77
HEX_CONSTANT (297) 15
DEC_CONSTANT (298) 13
INT_CONSTANT (299) 12 14
STRING (300)
IDENTIFIER (301) 11 12 22 23 31 32 53 58 59 60 61 62 63 64 65 92
IFX (302)


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
program (60)
    on left: 1, on right: 0
declarationList (61)
    on left: 2 3, on right: 1 2
declaration (62)
    on left: 4 5, on right: 2 3
varDeclaration (63)
    on left: 6, on right: 4 42
varDeclList (64)
    on left: 7 8, on right: 6 7
varDeclInitialize (65)
    on left: 9 10, on right: 7 8
varDecId (66)
    on left: 11 12, on right: 9 10
const_type (67)
    on left: 13 14 15, on right: 94
typeSpecifier (68)
    on left: 16 17 18 19, on right: 6 16 22 28
pointer (69)
    on left: 20 21, on right: 16 20
funDeclaration (70)
    on left: 22, on right: 5
funCall (71)
    on left: 23, on right: 40
params (72)
    on left: 24 25, on right: 22 23
paramList (73)
    on left: 26 27, on right: 24 26
paramTypeList (74)
    on left: 28, on right: 26 27
paramIdList (75)
    on left: 29 30, on right: 28 29
paramId (76)
    on left: 31 32, on right: 29 30
statement (77)
    on left: 33 34 35 36 37 38 39 40, on right: 23 44 48 49 50 51 52
compoundStmt (78)
    on left: 41, on right: 22 34
localDeclarations (79)
    on left: 42 43, on right: 41 42
statementList (80)
    on left: 44 45, on right: 41 44
expressionStmt (81)
    on left: 46 47, on right: 33
selectionStmt (82)
    on left: 48 49, on right: 35
iterationStmt (83)
    on left: 50 51 52, on right: 36
jumpStmt (84)
    on left: 53 54, on right: 37
returnStmt (85)
    on left: 55 56, on right: 38
breakStmt (86)
    on left: 57, on right: 39
expression (87)
    on left: 58 59 60 61 62 63 64 65 66, on right: 46 51 52 56 58 59
    60 61 62 63 93
simpleExpression (88)
    on left: 67 68, on right: 10 48 49 50 66 67
andExpression (89)
    on left: 69 70, on right: 67 68 69
unaryRelExpression (90)
    on left: 71 72, on right: 69 70 71
relExpression (91)
    on left: 73 74 75 76 77 78 79, on right: 72
sumExpression (92)
    on left: 80 81 82, on right: 73 74 75 76 77 78 79 80 81
term (93)
    on left: 83 84 85 86, on right: 80 81 82 83 84 85
unaryExpression (94)
    on left: 87 88, on right: 83 84 85 86 87
unaryOp (95)
    on left: 89 90 91, on right: 87
factor (96)
    on left: 92 93 94, on right: 88


state 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    LONG  shift, and go to state 2
    CHAR  shift, and go to state 3

    program          go to state 4
    declarationList  go to state 5
    declaration      go to state 6
    varDeclaration   go to state 7
    typeSpecifier    go to state 8
    funDeclaration   go to state 9


state 1

   17 typeSpecifier: INT .

    $default  reduce using rule 17 (typeSpecifier)


state 2

   18 typeSpecifier: LONG . INT

    INT  shift, and go to state 10


state 3

   19 typeSpecifier: CHAR .

    $default  reduce using rule 19 (typeSpecifier)


state 4

    0 $accept: program . $end

    $end  shift, and go to state 11


state 5

    1 program: declarationList .
    2 declarationList: declarationList . declaration

    INT   shift, and go to state 1
    LONG  shift, and go to state 2
    CHAR  shift, and go to state 3

    $default  reduce using rule 1 (program)

    declaration     go to state 12
    varDeclaration  go to state 7
    typeSpecifier   go to state 8
    funDeclaration  go to state 9


state 6

    3 declarationList: declaration .

    $default  reduce using rule 3 (declarationList)


state 7

    4 declaration: varDeclaration .

    $default  reduce using rule 4 (declaration)


state 8

    6 varDeclaration: typeSpecifier . varDeclList ';'
   16 typeSpecifier: typeSpecifier . pointer
   22 funDeclaration: typeSpecifier . IDENTIFIER '(' params ')' compoundStmt

    MULTIPLY    shift, and go to state 13
    IDENTIFIER  shift, and go to state 14

    varDeclList        go to state 15
    varDeclInitialize  go to state 16
    varDecId           go to state 17
    pointer            go to state 18


state 9

    5 declaration: funDeclaration .

    $default  reduce using rule 5 (declaration)


state 10

   18 typeSpecifier: LONG INT .

    $default  reduce using rule 18 (typeSpecifier)


state 11

    0 $accept: program $end .

    $default  accept


state 12

    2 declarationList: declarationList declaration .

    $default  reduce using rule 2 (declarationList)


state 13

   20 pointer: MULTIPLY . pointer
   21        | MULTIPLY .

    $default  reduce using rule 21 (pointer)

    pointer  go to state 19


state 14

   11 varDecId: IDENTIFIER .
   12         | IDENTIFIER . '[' INT_CONSTANT ']'
   22 funDeclaration: typeSpecifier IDENTIFIER . '(' params ')' compoundStmt

    '['  shift, and go to state 20
    '('  shift, and go to state 21

    $default  reduce using rule 11 (varDecId)


state 15

    6 varDeclaration: typeSpecifier varDeclList . ';'
    7 varDeclList: varDeclList . ',' varDeclInitialize

    ','  shift, and go to state 22
    ';'  shift, and go to state 23


state 16

    8 varDeclList: varDeclInitialize .

    $default  reduce using rule 8 (varDeclList)


state 17

    9 varDeclInitialize: varDecId .
   10                  | varDecId . ASSIGN simpleExpression

    ASSIGN  shift, and go to state 24

    $default  reduce using rule 9 (varDeclInitialize)


state 18

   16 typeSpecifier: typeSpecifier pointer .

    $default  reduce using rule 16 (typeSpecifier)


state 19

   20 pointer: MULTIPLY pointer .

    $default  reduce using rule 20 (pointer)


state 20

   12 varDecId: IDENTIFIER '[' . INT_CONSTANT ']'

    INT_CONSTANT  shift, and go to state 25


state 21

   22 funDeclaration: typeSpecifier IDENTIFIER '(' . params ')' compoundStmt

    INT   shift, and go to state 1
    LONG  shift, and go to state 2
    CHAR  shift, and go to state 3

    $default  reduce using rule 25 (params)

    typeSpecifier  go to state 26
    params         go to state 27
    paramList      go to state 28
    paramTypeList  go to state 29


state 22

    7 varDeclList: varDeclList ',' . varDeclInitialize

    IDENTIFIER  shift, and go to state 30

    varDeclInitialize  go to state 31
    varDecId           go to state 17


state 23

    6 varDeclaration: typeSpecifier varDeclList ';' .

    $default  reduce using rule 6 (varDeclaration)


state 24

   10 varDeclInitialize: varDecId ASSIGN . simpleExpression

    NOT           shift, and go to state 32
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    simpleExpression    go to state 42
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 25

   12 varDecId: IDENTIFIER '[' INT_CONSTANT . ']'

    ']'  shift, and go to state 51


state 26

   16 typeSpecifier: typeSpecifier . pointer
   28 paramTypeList: typeSpecifier . paramIdList

    MULTIPLY    shift, and go to state 13
    IDENTIFIER  shift, and go to state 52

    pointer      go to state 18
    paramIdList  go to state 53
    paramId      go to state 54


state 27

   22 funDeclaration: typeSpecifier IDENTIFIER '(' params . ')' compoundStmt

    ')'  shift, and go to state 55


state 28

   24 params: paramList .
   26 paramList: paramList . ',' paramTypeList

    ','  shift, and go to state 56

    $default  reduce using rule 24 (params)


state 29

   27 paramList: paramTypeList .

    $default  reduce using rule 27 (paramList)


state 30

   11 varDecId: IDENTIFIER .
   12         | IDENTIFIER . '[' INT_CONSTANT ']'

    '['  shift, and go to state 20

    $default  reduce using rule 11 (varDecId)


state 31

    7 varDeclList: varDeclList ',' varDeclInitialize .

    $default  reduce using rule 7 (varDeclList)


state 32

   71 unaryRelExpression: NOT . unaryRelExpression

    NOT           shift, and go to state 32
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    unaryRelExpression  go to state 57
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 33

   15 const_type: HEX_CONSTANT .

    $default  reduce using rule 15 (const_type)


state 34

   13 const_type: DEC_CONSTANT .

    $default  reduce using rule 13 (const_type)


state 35

   14 const_type: INT_CONSTANT .

    $default  reduce using rule 14 (const_type)


state 36

   92 factor: IDENTIFIER .

    $default  reduce using rule 92 (factor)


state 37

   93 factor: '(' . expression ')'

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 61
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 38

   89 unaryOp: '-' .

    $default  reduce using rule 89 (unaryOp)


state 39

   90 unaryOp: '*' .

    $default  reduce using rule 90 (unaryOp)


state 40

   91 unaryOp: '?' .

    $default  reduce using rule 91 (unaryOp)


state 41

   94 factor: const_type .

    $default  reduce using rule 94 (factor)


state 42

   10 varDeclInitialize: varDecId ASSIGN simpleExpression .
   67 simpleExpression: simpleExpression . LG_OR andExpression

    LG_OR  shift, and go to state 63

    $default  reduce using rule 10 (varDeclInitialize)


state 43

   68 simpleExpression: andExpression .
   69 andExpression: andExpression . LG_AND unaryRelExpression

    LG_AND  shift, and go to state 64

    $default  reduce using rule 68 (simpleExpression)


state 44

   70 andExpression: unaryRelExpression .

    $default  reduce using rule 70 (andExpression)


state 45

   72 unaryRelExpression: relExpression .

    $default  reduce using rule 72 (unaryRelExpression)


state 46

   73 relExpression: sumExpression . GREATER_THAN sumExpression
   74              | sumExpression . LESSER_THAN sumExpression
   75              | sumExpression . LESS_EQ sumExpression
   76              | sumExpression . GREATER_EQ sumExpression
   77              | sumExpression . NOT_EQ sumExpression
   78              | sumExpression . EQUAL sumExpression
   79              | sumExpression .
   80 sumExpression: sumExpression . ADD term
   81              | sumExpression . SUBTRACT term

    ADD           shift, and go to state 65
    SUBTRACT      shift, and go to state 66
    GREATER_THAN  shift, and go to state 67
    LESSER_THAN   shift, and go to state 68
    LESS_EQ       shift, and go to state 69
    GREATER_EQ    shift, and go to state 70
    EQUAL         shift, and go to state 71
    NOT_EQ        shift, and go to state 72

    $default  reduce using rule 79 (relExpression)


state 47

   82 sumExpression: term .
   83 term: term . MULTIPLY unaryExpression
   84     | term . DIVIDE unaryExpression
   85     | term . MOD unaryExpression

    MULTIPLY  shift, and go to state 73
    DIVIDE    shift, and go to state 74
    MOD       shift, and go to state 75

    $default  reduce using rule 82 (sumExpression)


state 48

   86 term: unaryExpression .

    $default  reduce using rule 86 (term)


state 49

   87 unaryExpression: unaryOp . unaryExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    unaryExpression  go to state 76
    unaryOp          go to state 49
    factor           go to state 50


state 50

   88 unaryExpression: factor .

    $default  reduce using rule 88 (unaryExpression)


state 51

   12 varDecId: IDENTIFIER '[' INT_CONSTANT ']' .

    $default  reduce using rule 12 (varDecId)


state 52

   31 paramId: IDENTIFIER .
   32        | IDENTIFIER . '[' ']'

    '['  shift, and go to state 77

    $default  reduce using rule 31 (paramId)


state 53

   28 paramTypeList: typeSpecifier paramIdList .
   29 paramIdList: paramIdList . ',' paramId

    ','  shift, and go to state 78

    ','       [reduce using rule 28 (paramTypeList)]
    $default  reduce using rule 28 (paramTypeList)


state 54

   30 paramIdList: paramId .

    $default  reduce using rule 30 (paramIdList)


state 55

   22 funDeclaration: typeSpecifier IDENTIFIER '(' params ')' . compoundStmt

    '{'  shift, and go to state 79

    compoundStmt  go to state 80


state 56

   26 paramList: paramList ',' . paramTypeList

    INT   shift, and go to state 1
    LONG  shift, and go to state 2
    CHAR  shift, and go to state 3

    typeSpecifier  go to state 26
    paramTypeList  go to state 81


state 57

   71 unaryRelExpression: NOT unaryRelExpression .

    $default  reduce using rule 71 (unaryRelExpression)


state 58

   65 expression: DECREMENT . IDENTIFIER

    IDENTIFIER  shift, and go to state 82


state 59

   64 expression: INCREMENT . IDENTIFIER

    IDENTIFIER  shift, and go to state 83


state 60

   58 expression: IDENTIFIER . ASSIGN expression
   59           | IDENTIFIER . ADD_ASSIGN expression
   60           | IDENTIFIER . SUB_ASSIGN expression
   61           | IDENTIFIER . MUL_ASSIGN expression
   62           | IDENTIFIER . DIV_ASSIGN expression
   63           | IDENTIFIER . MOD_ASSIGN expression
   92 factor: IDENTIFIER .

    ASSIGN      shift, and go to state 84
    ADD_ASSIGN  shift, and go to state 85
    SUB_ASSIGN  shift, and go to state 86
    MUL_ASSIGN  shift, and go to state 87
    DIV_ASSIGN  shift, and go to state 88
    MOD_ASSIGN  shift, and go to state 89

    $default  reduce using rule 92 (factor)


state 61

   93 factor: '(' expression . ')'

    ')'  shift, and go to state 90


state 62

   66 expression: simpleExpression .
   67 simpleExpression: simpleExpression . LG_OR andExpression

    LG_OR  shift, and go to state 63

    $default  reduce using rule 66 (expression)


state 63

   67 simpleExpression: simpleExpression LG_OR . andExpression

    NOT           shift, and go to state 32
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    andExpression       go to state 91
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 64

   69 andExpression: andExpression LG_AND . unaryRelExpression

    NOT           shift, and go to state 32
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    unaryRelExpression  go to state 92
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 65

   80 sumExpression: sumExpression ADD . term

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    term             go to state 93
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 66

   81 sumExpression: sumExpression SUBTRACT . term

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    term             go to state 94
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 67

   73 relExpression: sumExpression GREATER_THAN . sumExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    sumExpression    go to state 95
    term             go to state 47
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 68

   74 relExpression: sumExpression LESSER_THAN . sumExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    sumExpression    go to state 96
    term             go to state 47
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 69

   75 relExpression: sumExpression LESS_EQ . sumExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    sumExpression    go to state 97
    term             go to state 47
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 70

   76 relExpression: sumExpression GREATER_EQ . sumExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    sumExpression    go to state 98
    term             go to state 47
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 71

   78 relExpression: sumExpression EQUAL . sumExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    sumExpression    go to state 99
    term             go to state 47
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 72

   77 relExpression: sumExpression NOT_EQ . sumExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    sumExpression    go to state 100
    term             go to state 47
    unaryExpression  go to state 48
    unaryOp          go to state 49
    factor           go to state 50


state 73

   83 term: term MULTIPLY . unaryExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    unaryExpression  go to state 101
    unaryOp          go to state 49
    factor           go to state 50


state 74

   84 term: term DIVIDE . unaryExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    unaryExpression  go to state 102
    unaryOp          go to state 49
    factor           go to state 50


state 75

   85 term: term MOD . unaryExpression

    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type       go to state 41
    unaryExpression  go to state 103
    unaryOp          go to state 49
    factor           go to state 50


state 76

   87 unaryExpression: unaryOp unaryExpression .

    $default  reduce using rule 87 (unaryExpression)


state 77

   32 paramId: IDENTIFIER '[' . ']'

    ']'  shift, and go to state 104


state 78

   29 paramIdList: paramIdList ',' . paramId

    IDENTIFIER  shift, and go to state 52

    paramId  go to state 105


state 79

   41 compoundStmt: '{' . localDeclarations statementList '}'

    $default  reduce using rule 43 (localDeclarations)

    localDeclarations  go to state 106


state 80

   22 funDeclaration: typeSpecifier IDENTIFIER '(' params ')' compoundStmt .

    $default  reduce using rule 22 (funDeclaration)


state 81

   26 paramList: paramList ',' paramTypeList .

    $default  reduce using rule 26 (paramList)


state 82

   65 expression: DECREMENT IDENTIFIER .

    $default  reduce using rule 65 (expression)


state 83

   64 expression: INCREMENT IDENTIFIER .

    $default  reduce using rule 64 (expression)


state 84

   58 expression: IDENTIFIER ASSIGN . expression

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 107
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 85

   59 expression: IDENTIFIER ADD_ASSIGN . expression

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 108
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 86

   60 expression: IDENTIFIER SUB_ASSIGN . expression

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 109
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 87

   61 expression: IDENTIFIER MUL_ASSIGN . expression

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 110
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 88

   62 expression: IDENTIFIER DIV_ASSIGN . expression

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 111
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 89

   63 expression: IDENTIFIER MOD_ASSIGN . expression

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 112
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 90

   93 factor: '(' expression ')' .

    $default  reduce using rule 93 (factor)


state 91

   67 simpleExpression: simpleExpression LG_OR andExpression .
   69 andExpression: andExpression . LG_AND unaryRelExpression

    LG_AND  shift, and go to state 64

    $default  reduce using rule 67 (simpleExpression)


state 92

   69 andExpression: andExpression LG_AND unaryRelExpression .

    $default  reduce using rule 69 (andExpression)


state 93

   80 sumExpression: sumExpression ADD term .
   83 term: term . MULTIPLY unaryExpression
   84     | term . DIVIDE unaryExpression
   85     | term . MOD unaryExpression

    MULTIPLY  shift, and go to state 73
    DIVIDE    shift, and go to state 74
    MOD       shift, and go to state 75

    $default  reduce using rule 80 (sumExpression)


state 94

   81 sumExpression: sumExpression SUBTRACT term .
   83 term: term . MULTIPLY unaryExpression
   84     | term . DIVIDE unaryExpression
   85     | term . MOD unaryExpression

    MULTIPLY  shift, and go to state 73
    DIVIDE    shift, and go to state 74
    MOD       shift, and go to state 75

    $default  reduce using rule 81 (sumExpression)


state 95

   73 relExpression: sumExpression GREATER_THAN sumExpression .
   80 sumExpression: sumExpression . ADD term
   81              | sumExpression . SUBTRACT term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 73 (relExpression)


state 96

   74 relExpression: sumExpression LESSER_THAN sumExpression .
   80 sumExpression: sumExpression . ADD term
   81              | sumExpression . SUBTRACT term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 74 (relExpression)


state 97

   75 relExpression: sumExpression LESS_EQ sumExpression .
   80 sumExpression: sumExpression . ADD term
   81              | sumExpression . SUBTRACT term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 75 (relExpression)


state 98

   76 relExpression: sumExpression GREATER_EQ sumExpression .
   80 sumExpression: sumExpression . ADD term
   81              | sumExpression . SUBTRACT term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 76 (relExpression)


state 99

   78 relExpression: sumExpression EQUAL sumExpression .
   80 sumExpression: sumExpression . ADD term
   81              | sumExpression . SUBTRACT term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 78 (relExpression)


state 100

   77 relExpression: sumExpression NOT_EQ sumExpression .
   80 sumExpression: sumExpression . ADD term
   81              | sumExpression . SUBTRACT term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 77 (relExpression)


state 101

   83 term: term MULTIPLY unaryExpression .

    $default  reduce using rule 83 (term)


state 102

   84 term: term DIVIDE unaryExpression .

    $default  reduce using rule 84 (term)


state 103

   85 term: term MOD unaryExpression .

    $default  reduce using rule 85 (term)


state 104

   32 paramId: IDENTIFIER '[' ']' .

    $default  reduce using rule 32 (paramId)


state 105

   29 paramIdList: paramIdList ',' paramId .

    $default  reduce using rule 29 (paramIdList)


state 106

   41 compoundStmt: '{' localDeclarations . statementList '}'
   42 localDeclarations: localDeclarations . varDeclaration

    INT   shift, and go to state 1
    LONG  shift, and go to state 2
    CHAR  shift, and go to state 3

    $default  reduce using rule 45 (statementList)

    varDeclaration  go to state 113
    typeSpecifier   go to state 114
    statementList   go to state 115


state 107

   58 expression: IDENTIFIER ASSIGN expression .

    $default  reduce using rule 58 (expression)


state 108

   59 expression: IDENTIFIER ADD_ASSIGN expression .

    $default  reduce using rule 59 (expression)


state 109

   60 expression: IDENTIFIER SUB_ASSIGN expression .

    $default  reduce using rule 60 (expression)


state 110

   61 expression: IDENTIFIER MUL_ASSIGN expression .

    $default  reduce using rule 61 (expression)


state 111

   62 expression: IDENTIFIER DIV_ASSIGN expression .

    $default  reduce using rule 62 (expression)


state 112

   63 expression: IDENTIFIER MOD_ASSIGN expression .

    $default  reduce using rule 63 (expression)


state 113

   42 localDeclarations: localDeclarations varDeclaration .

    $default  reduce using rule 42 (localDeclarations)


state 114

    6 varDeclaration: typeSpecifier . varDeclList ';'
   16 typeSpecifier: typeSpecifier . pointer

    MULTIPLY    shift, and go to state 13
    IDENTIFIER  shift, and go to state 30

    varDeclList        go to state 15
    varDeclInitialize  go to state 16
    varDecId           go to state 17
    pointer            go to state 18


state 115

   41 compoundStmt: '{' localDeclarations statementList . '}'
   44 statementList: statementList . statement

    IF            shift, and go to state 116
    FOR           shift, and go to state 117
    DO            shift, and go to state 118
    WHILE         shift, and go to state 119
    GOTO          shift, and go to state 120
    BREAK         shift, and go to state 121
    CONTINUE      shift, and go to state 122
    RETURN        shift, and go to state 123
    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 124
    ';'           shift, and go to state 125
    '('           shift, and go to state 37
    '{'           shift, and go to state 79
    '}'           shift, and go to state 126
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    funCall             go to state 127
    statement           go to state 128
    compoundStmt        go to state 129
    expressionStmt      go to state 130
    selectionStmt       go to state 131
    iterationStmt       go to state 132
    jumpStmt            go to state 133
    returnStmt          go to state 134
    breakStmt           go to state 135
    expression          go to state 136
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 116

   48 selectionStmt: IF . '(' simpleExpression ')' statement
   49              | IF . '(' simpleExpression ')' statement ELSE statement

    '('  shift, and go to state 137


state 117

   52 iterationStmt: FOR . '(' expression ';' expression ';' expression ')' statement

    '('  shift, and go to state 138


state 118

   51 iterationStmt: DO . statement WHILE '(' expression ')'

    IF            shift, and go to state 116
    FOR           shift, and go to state 117
    DO            shift, and go to state 118
    WHILE         shift, and go to state 119
    GOTO          shift, and go to state 120
    BREAK         shift, and go to state 121
    CONTINUE      shift, and go to state 122
    RETURN        shift, and go to state 123
    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 124
    ';'           shift, and go to state 125
    '('           shift, and go to state 37
    '{'           shift, and go to state 79
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    funCall             go to state 127
    statement           go to state 139
    compoundStmt        go to state 129
    expressionStmt      go to state 130
    selectionStmt       go to state 131
    iterationStmt       go to state 132
    jumpStmt            go to state 133
    returnStmt          go to state 134
    breakStmt           go to state 135
    expression          go to state 136
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 119

   50 iterationStmt: WHILE . '(' simpleExpression ')' statement

    '('  shift, and go to state 140


state 120

   53 jumpStmt: GOTO . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 141


state 121

   57 breakStmt: BREAK . ';'

    ';'  shift, and go to state 142


state 122

   54 jumpStmt: CONTINUE . ';'

    ';'  shift, and go to state 143


state 123

   55 returnStmt: RETURN . ';'
   56           | RETURN . expression

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    ';'           shift, and go to state 144
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 145
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 124

   23 funCall: IDENTIFIER . '(' params ')' statement
   58 expression: IDENTIFIER . ASSIGN expression
   59           | IDENTIFIER . ADD_ASSIGN expression
   60           | IDENTIFIER . SUB_ASSIGN expression
   61           | IDENTIFIER . MUL_ASSIGN expression
   62           | IDENTIFIER . DIV_ASSIGN expression
   63           | IDENTIFIER . MOD_ASSIGN expression
   92 factor: IDENTIFIER .

    ASSIGN      shift, and go to state 84
    ADD_ASSIGN  shift, and go to state 85
    SUB_ASSIGN  shift, and go to state 86
    MUL_ASSIGN  shift, and go to state 87
    DIV_ASSIGN  shift, and go to state 88
    MOD_ASSIGN  shift, and go to state 89
    '('         shift, and go to state 146

    $default  reduce using rule 92 (factor)


state 125

   47 expressionStmt: ';' .

    $default  reduce using rule 47 (expressionStmt)


state 126

   41 compoundStmt: '{' localDeclarations statementList '}' .

    $default  reduce using rule 41 (compoundStmt)


state 127

   40 statement: funCall .

    $default  reduce using rule 40 (statement)


state 128

   44 statementList: statementList statement .

    $default  reduce using rule 44 (statementList)


state 129

   34 statement: compoundStmt .

    $default  reduce using rule 34 (statement)


state 130

   33 statement: expressionStmt .

    $default  reduce using rule 33 (statement)


state 131

   35 statement: selectionStmt .

    $default  reduce using rule 35 (statement)


state 132

   36 statement: iterationStmt .

    $default  reduce using rule 36 (statement)


state 133

   37 statement: jumpStmt .

    $default  reduce using rule 37 (statement)


state 134

   38 statement: returnStmt .

    $default  reduce using rule 38 (statement)


state 135

   39 statement: breakStmt .

    $default  reduce using rule 39 (statement)


state 136

   46 expressionStmt: expression . ';'

    ';'  shift, and go to state 147


state 137

   48 selectionStmt: IF '(' . simpleExpression ')' statement
   49              | IF '(' . simpleExpression ')' statement ELSE statement

    NOT           shift, and go to state 32
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    simpleExpression    go to state 148
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 138

   52 iterationStmt: FOR '(' . expression ';' expression ';' expression ')' statement

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 149
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 139

   51 iterationStmt: DO statement . WHILE '(' expression ')'

    WHILE  shift, and go to state 150


state 140

   50 iterationStmt: WHILE '(' . simpleExpression ')' statement

    NOT           shift, and go to state 32
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 36
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    simpleExpression    go to state 151
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 141

   53 jumpStmt: GOTO IDENTIFIER . ';'

    ';'  shift, and go to state 152


state 142

   57 breakStmt: BREAK ';' .

    $default  reduce using rule 57 (breakStmt)


state 143

   54 jumpStmt: CONTINUE ';' .

    $default  reduce using rule 54 (jumpStmt)


state 144

   55 returnStmt: RETURN ';' .

    $default  reduce using rule 55 (returnStmt)


state 145

   56 returnStmt: RETURN expression .

    $default  reduce using rule 56 (returnStmt)


state 146

   23 funCall: IDENTIFIER '(' . params ')' statement

    INT   shift, and go to state 1
    LONG  shift, and go to state 2
    CHAR  shift, and go to state 3

    $default  reduce using rule 25 (params)

    typeSpecifier  go to state 26
    params         go to state 153
    paramList      go to state 28
    paramTypeList  go to state 29


state 147

   46 expressionStmt: expression ';' .

    $default  reduce using rule 46 (expressionStmt)


state 148

   48 selectionStmt: IF '(' simpleExpression . ')' statement
   49              | IF '(' simpleExpression . ')' statement ELSE statement
   67 simpleExpression: simpleExpression . LG_OR andExpression

    LG_OR  shift, and go to state 63
    ')'    shift, and go to state 154


state 149

   52 iterationStmt: FOR '(' expression . ';' expression ';' expression ')' statement

    ';'  shift, and go to state 155


state 150

   51 iterationStmt: DO statement WHILE . '(' expression ')'

    '('  shift, and go to state 156


state 151

   50 iterationStmt: WHILE '(' simpleExpression . ')' statement
   67 simpleExpression: simpleExpression . LG_OR andExpression

    LG_OR  shift, and go to state 63
    ')'    shift, and go to state 157


state 152

   53 jumpStmt: GOTO IDENTIFIER ';' .

    $default  reduce using rule 53 (jumpStmt)


state 153

   23 funCall: IDENTIFIER '(' params . ')' statement

    ')'  shift, and go to state 158


state 154

   48 selectionStmt: IF '(' simpleExpression ')' . statement
   49              | IF '(' simpleExpression ')' . statement ELSE statement

    IF            shift, and go to state 116
    FOR           shift, and go to state 117
    DO            shift, and go to state 118
    WHILE         shift, and go to state 119
    GOTO          shift, and go to state 120
    BREAK         shift, and go to state 121
    CONTINUE      shift, and go to state 122
    RETURN        shift, and go to state 123
    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 124
    ';'           shift, and go to state 125
    '('           shift, and go to state 37
    '{'           shift, and go to state 79
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    funCall             go to state 127
    statement           go to state 159
    compoundStmt        go to state 129
    expressionStmt      go to state 130
    selectionStmt       go to state 131
    iterationStmt       go to state 132
    jumpStmt            go to state 133
    returnStmt          go to state 134
    breakStmt           go to state 135
    expression          go to state 136
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 155

   52 iterationStmt: FOR '(' expression ';' . expression ';' expression ')' statement

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 160
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 156

   51 iterationStmt: DO statement WHILE '(' . expression ')'

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 161
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 157

   50 iterationStmt: WHILE '(' simpleExpression ')' . statement

    IF            shift, and go to state 116
    FOR           shift, and go to state 117
    DO            shift, and go to state 118
    WHILE         shift, and go to state 119
    GOTO          shift, and go to state 120
    BREAK         shift, and go to state 121
    CONTINUE      shift, and go to state 122
    RETURN        shift, and go to state 123
    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 124
    ';'           shift, and go to state 125
    '('           shift, and go to state 37
    '{'           shift, and go to state 79
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    funCall             go to state 127
    statement           go to state 162
    compoundStmt        go to state 129
    expressionStmt      go to state 130
    selectionStmt       go to state 131
    iterationStmt       go to state 132
    jumpStmt            go to state 133
    returnStmt          go to state 134
    breakStmt           go to state 135
    expression          go to state 136
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 158

   23 funCall: IDENTIFIER '(' params ')' . statement

    IF            shift, and go to state 116
    FOR           shift, and go to state 117
    DO            shift, and go to state 118
    WHILE         shift, and go to state 119
    GOTO          shift, and go to state 120
    BREAK         shift, and go to state 121
    CONTINUE      shift, and go to state 122
    RETURN        shift, and go to state 123
    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 124
    ';'           shift, and go to state 125
    '('           shift, and go to state 37
    '{'           shift, and go to state 79
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    funCall             go to state 127
    statement           go to state 163
    compoundStmt        go to state 129
    expressionStmt      go to state 130
    selectionStmt       go to state 131
    iterationStmt       go to state 132
    jumpStmt            go to state 133
    returnStmt          go to state 134
    breakStmt           go to state 135
    expression          go to state 136
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 159

   48 selectionStmt: IF '(' simpleExpression ')' statement .
   49              | IF '(' simpleExpression ')' statement . ELSE statement

    ELSE  shift, and go to state 164

    $default  reduce using rule 48 (selectionStmt)


state 160

   52 iterationStmt: FOR '(' expression ';' expression . ';' expression ')' statement

    ';'  shift, and go to state 165


state 161

   51 iterationStmt: DO statement WHILE '(' expression . ')'

    ')'  shift, and go to state 166


state 162

   50 iterationStmt: WHILE '(' simpleExpression ')' statement .

    $default  reduce using rule 50 (iterationStmt)


state 163

   23 funCall: IDENTIFIER '(' params ')' statement .

    $default  reduce using rule 23 (funCall)


state 164

   49 selectionStmt: IF '(' simpleExpression ')' statement ELSE . statement

    IF            shift, and go to state 116
    FOR           shift, and go to state 117
    DO            shift, and go to state 118
    WHILE         shift, and go to state 119
    GOTO          shift, and go to state 120
    BREAK         shift, and go to state 121
    CONTINUE      shift, and go to state 122
    RETURN        shift, and go to state 123
    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 124
    ';'           shift, and go to state 125
    '('           shift, and go to state 37
    '{'           shift, and go to state 79
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    funCall             go to state 127
    statement           go to state 167
    compoundStmt        go to state 129
    expressionStmt      go to state 130
    selectionStmt       go to state 131
    iterationStmt       go to state 132
    jumpStmt            go to state 133
    returnStmt          go to state 134
    breakStmt           go to state 135
    expression          go to state 136
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 165

   52 iterationStmt: FOR '(' expression ';' expression ';' . expression ')' statement

    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 60
    '('           shift, and go to state 37
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    expression          go to state 168
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 166

   51 iterationStmt: DO statement WHILE '(' expression ')' .

    $default  reduce using rule 51 (iterationStmt)


state 167

   49 selectionStmt: IF '(' simpleExpression ')' statement ELSE statement .

    $default  reduce using rule 49 (selectionStmt)


state 168

   52 iterationStmt: FOR '(' expression ';' expression ';' expression . ')' statement

    ')'  shift, and go to state 169


state 169

   52 iterationStmt: FOR '(' expression ';' expression ';' expression ')' . statement

    IF            shift, and go to state 116
    FOR           shift, and go to state 117
    DO            shift, and go to state 118
    WHILE         shift, and go to state 119
    GOTO          shift, and go to state 120
    BREAK         shift, and go to state 121
    CONTINUE      shift, and go to state 122
    RETURN        shift, and go to state 123
    NOT           shift, and go to state 32
    DECREMENT     shift, and go to state 58
    INCREMENT     shift, and go to state 59
    HEX_CONSTANT  shift, and go to state 33
    DEC_CONSTANT  shift, and go to state 34
    INT_CONSTANT  shift, and go to state 35
    IDENTIFIER    shift, and go to state 124
    ';'           shift, and go to state 125
    '('           shift, and go to state 37
    '{'           shift, and go to state 79
    '-'           shift, and go to state 38
    '*'           shift, and go to state 39
    '?'           shift, and go to state 40

    const_type          go to state 41
    funCall             go to state 127
    statement           go to state 170
    compoundStmt        go to state 129
    expressionStmt      go to state 130
    selectionStmt       go to state 131
    iterationStmt       go to state 132
    jumpStmt            go to state 133
    returnStmt          go to state 134
    breakStmt           go to state 135
    expression          go to state 136
    simpleExpression    go to state 62
    andExpression       go to state 43
    unaryRelExpression  go to state 44
    relExpression       go to state 45
    sumExpression       go to state 46
    term                go to state 47
    unaryExpression     go to state 48
    unaryOp             go to state 49
    factor              go to state 50


state 170

   52 iterationStmt: FOR '(' expression ';' expression ';' expression ')' statement .

    $default  reduce using rule 52 (iterationStmt)
